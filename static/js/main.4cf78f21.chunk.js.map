{"version":3,"sources":["components/contact-form/ContactForm.module.css","components/App.module.css","components/contact-list-item/ContactListItem.module.css","components/contact-list/ContactList.module.css","components/contact-list/transitions/pop.module.css","components/filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/contact-form/ContactForm.jsx","components/contact-list-item/ContactListItem.jsx","components/contact-list/ContactList.jsx","components/contact-list/ContactList.container.js","components/filter/Filter.jsx","components/App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","handleInput","axios","defaults","baseURL","getAllContacts","state","contacts","items","getFilter","filter","getLoading","loading","getFilteredContacts","createSelector","item","name","toLowerCase","includes","ContactForm","number","event","target","value","setState","handleSubmit","preventDefault","entryCheck","props","find","contact","alert","length","contactNew","id","nanoid","addContact","resetForm","this","onSubmit","className","styles","addContactForm","label","type","placeholder","input","onChange","btnAdd","Component","mapDispatchToProps","dispatch","a","post","data","connect","contactsSelectors","deleteContact","delete","data-id","onClick","btnDelete","ContactList","fetchContacts","TransitionGroup","component","list","map","CSSTransition","timeout","classNames","popTransition","contactListItem","get","Filter","autoComplete","App","container","isLoadingContacts","color","height","width","contactsTitle","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cf78f21.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addContactForm\":\"ContactForm_addContactForm__2Z7ub\",\"label\":\"ContactForm_label__2fFqZ\",\"input\":\"ContactForm_input__24MHo\",\"text\":\"ContactForm_text__3W6xD\",\"btnAdd\":\"ContactForm_btnAdd__3bVZA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__40Nfj\",\"contacts\":\"App_contacts__sv4Iy\",\"contactsTitle\":\"App_contactsTitle__2-Um2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnDelete\":\"ContactListItem_btnDelete__2Wz8V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2x4yU\",\"contactListItem\":\"ContactList_contactListItem__3PCO7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__26g-l\",\"enterActive\":\"pop_enterActive__AwjkT\",\"exit\":\"pop_exit__VirVW\",\"exitActive\":\"pop_exitActive__2vTpx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__mgAE1\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\n// get all\r\nconst fetchContactsRequest = createAction('contacts/fetch-contacts-request');\r\nconst fetchContactsSuccess = createAction('contacts/fetch-contacts-success');\r\nconst fetchContactsError = createAction('contacts/fetch-contacts-error');\r\n\r\n// create\r\nconst addContactRequest = createAction('contacts/add-contact-request');\r\nconst addContactSuccess = createAction('contacts/add-contact-success');\r\nconst addContactError = createAction('contacts/add-contact-error');\r\n\r\n// delete\r\nconst deleteContactRequest = createAction('contacts/delete-contact-request');\r\nconst deleteContactSuccess = createAction('contacts/delete-contact-success');\r\nconst deleteContactError = createAction('contacts/delete-contact-error');\r\n\r\n// basic - fron-end action\r\nconst handleInput = createAction('contacts/handleInput');\r\n\r\nexport {\r\n  handleInput,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n};\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (errors) {\r\n    dispatch(fetchContactsError(errors));\r\n  }\r\n};\r\n\r\n// const fetchContacts = () => dispatch => {\r\n//   dispatch(fetchContactsRequest());\r\n//   axios\r\n//     .get('/contacts')\r\n//     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n//     .catch(error => dispatch(fetchContactsError(error)));\r\n// };\r\n\r\nconst addContact = contact => async dispatch => {\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (errors) {\r\n    dispatch(addContactError(errors));\r\n  }\r\n};\r\n\r\n// const addContact = contact => dispatch => {\r\n//   dispatch(addContactRequest());\r\n//   axios\r\n//     .post('/contacts', contact)\r\n//     .then(({ data }) => dispatch(addContactSuccess(data)))\r\n//     .catch(error => dispatch(addContactError(error)));\r\n// };\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (errors) {\r\n    dispatch(deleteContactError(errors));\r\n  }\r\n};\r\n\r\n// const deleteContact = contactId => dispatch => {\r\n//   dispatch(deleteContactRequest());\r\n\r\n//   axios\r\n//     .delete(`/contacts/${contactId}`)\r\n//     .then(data => dispatch(deleteContactSuccess(contactId)))\r\n//     .catch(error => dispatch(deleteContactError(error)));\r\n// };\r\n\r\nexport { addContact, deleteContact, fetchContacts };\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\n// const getFilteredContacts = state => {\r\n//   const items = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n\r\n//   return items.filter(item =>\r\n//     item.name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\n\r\nconst getFilteredContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (items, filter) => {\r\n    return items.filter(item =>\r\n      item.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getAllContacts,\r\n  getFilter,\r\n  getFilteredContacts,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts/contacts-operations';\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport styles from './ContactForm.module.css';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleInput = event => {\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const { name, number } = this.state;\r\n\r\n    const entryCheck = this.props.contacts.find(\r\n      contact => contact.name === name || contact.number === number,\r\n    );\r\n\r\n    if (entryCheck) {\r\n      alert(\r\n        `Either '${entryCheck.name}' or '${entryCheck.number}' already exists`,\r\n      );\r\n    } else if (name.length === 0 || number.length === 0) {\r\n      alert(`Please, fill in all the fields`);\r\n    } else {\r\n      const contactNew = {\r\n        id: nanoid(),\r\n        name,\r\n        number,\r\n      };\r\n      this.props.addContact(contactNew);\r\n    }\r\n    this.resetForm();\r\n  };\r\n\r\n  resetForm = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit} className={styles.addContactForm}>\r\n          <label className={styles.label}>Name:</label>\r\n          <input\r\n            name=\"name\"\r\n            type=\"text\"\r\n            placeholder=\"Name Surname\"\r\n            className={styles.input}\r\n            onChange={this.handleInput}\r\n            value={name}\r\n          />\r\n          <label className={styles.label}>Number:</label>\r\n          <input\r\n            name=\"number\"\r\n            type=\"text\"\r\n            // type=\"tel\"\r\n            placeholder=\"123-456\"\r\n            // pattern=\"[0-9]{3}-[0-9]{3}\"\r\n            className={styles.input}\r\n            onChange={this.handleInput}\r\n            value={number}\r\n          />\r\n          {/* <span className={styles.text}>\r\n            <i>Use this format only:</i> xxx-xxx\r\n          </span> */}\r\n          <button type=\"submit\" className={styles.btnAdd}>\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\r\nimport styles from './ContactListItem.module.css';\r\n\r\nconst ContactListItem = ({ id, name, number, deleteContact }) => {\r\n  return (\r\n    <>\r\n      <p className={styles.contact}>\r\n        <b>{name}</b>: {number}\r\n      </p>\r\n\r\n      <button\r\n        data-id={id}\r\n        onClick={event => deleteContact(id)}\r\n        type=\"button\"\r\n        className={styles.btnDelete}\r\n      >\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  deleteContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactListItem);\r\n","import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport ContactListItem from '../contact-list-item/ContactListItem';\r\n// import { connect } from 'react-redux';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport popTransition from './transitions/pop.module.css';\r\n// import slideTransition from './transitions/slide.module.css';\r\nimport styles from './ContactList.module.css';\r\n\r\nclass ContactList extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"contactsList\">\r\n        {this.props.contacts.length === 0 ? (\r\n          <p>There are no contacts here yet ...</p>\r\n        ) : (\r\n          <TransitionGroup component=\"ul\" className={styles.list}>\r\n            {/* <ul className={styles.list}> */}\r\n            {this.props.contacts.map(contact => (\r\n              <CSSTransition\r\n                key={contact.id}\r\n                timeout={200}\r\n                classNames={popTransition}\r\n              >\r\n                <li className={styles.contactListItem} key={contact.id}>\r\n                  <ContactListItem {...contact} />\r\n                </li>\r\n              </CSSTransition>\r\n            ))}\r\n            {/* </ul> */}\r\n          </TransitionGroup>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const ContactList = ({ contacts }) => {\r\n// componentDidMount() {\r\n//   this.props.fetchContacts();\r\n// }\r\n// return (\r\n//   <div className=\"contactsList\">\r\n//     {contacts.length === 0 ? (\r\n//       <p>There are no contacts here yet ...</p>\r\n//     ) : (\r\n//       <TransitionGroup component=\"ul\" className={styles.list}>\r\n//         {/* <ul className={styles.list}> */}\r\n//         {contacts.map(contact => (\r\n//           <CSSTransition\r\n//             key={contact.id}\r\n//             timeout={200}\r\n//             classNames={popTransition}\r\n//           >\r\n//             <li className={styles.contactListItem} key={contact.id}>\r\n//               <ContactListItem {...contact} />\r\n//             </li>\r\n//           </CSSTransition>\r\n//         ))}\r\n//         {/* </ul> */}\r\n//       </TransitionGroup>\r\n//     )}\r\n//   </div>\r\n// );\r\n// };\r\n\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.array.isRequired,\r\n//   // onRemove: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const getFilteredContacts = state => {\r\n//   const { filter, items } = state.contacts;\r\n//   // const { contacts } = this.state;\r\n//   return items.filter(item =>\r\n//     item.name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   contacts: getFilteredContacts(state),\r\n// });\r\n\r\n// const mapDispatchToProps = {};\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nexport default ContactList;\r\n","import { connect } from 'react-redux';\r\nimport { fetchContacts } from '../../redux/contacts/contacts-operations';\r\nimport ContactList from './ContactList';\r\nimport { handleInput } from '../../redux/contacts/contacts-actions';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\n// const getFilteredContacts = state => {\r\n//   const { filter, items } = state.contacts;\r\n\r\n//   return items.filter(item =>\r\n//     item.name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getFilteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  fetchContacts,\r\n  handleInput,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { handleInput } from '../../redux/contacts/contacts-actions';\r\nimport styles from './Filter.module.css';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nclass Filter extends Component {\r\n  state = {};\r\n\r\n  // componentDidUpdate() {\r\n  //   if (this.props.contacts.items < 2 && this.props.contacts.filter) {\r\n  //     this.props.handleInput('');\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    const { contacts, filter, handleInput } = this.props;\r\n\r\n    return (\r\n      <>\r\n        {contacts.length >= 2 && (\r\n          <div className=\"contactsFilter\">\r\n            <p>Find contacts by name:</p>\r\n            <input\r\n              name=\"filter\"\r\n              type=\"text\"\r\n              autoComplete=\"off\"\r\n              className={styles.input}\r\n              onChange={event => handleInput(event.target.value)}\r\n              value={filter}\r\n            />\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  handleInput: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: contactsSelectors.getFilter(state),\r\n  contacts: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  handleInput,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from './contact-form/ContactForm';\r\nimport ContactList from './contact-list/ContactList.container';\r\nimport Filter from './filter/Filter';\r\nimport Loader from 'react-loader-spinner';\r\nimport styles from './App.module.css';\r\nimport { handleInput } from '../redux/contacts/contacts-actions';\r\nimport contactsSelectors from '../redux/contacts/contacts-selectors';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [\r\n      // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n      // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n      // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n      // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n    ],\r\n    filter: '',\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <h2>Phonebook</h2>\r\n        <ContactForm />\r\n\r\n        {this.props.isLoadingContacts && (\r\n          <Loader type=\"ThreeDots\" color=\"green\" height={80} width={80} />\r\n        )}\r\n\r\n        <div className={styles.contacts}>\r\n          <h3 className={styles.contactsTitle}>Contacts</h3>\r\n          <Filter />\r\n          <ContactList handleInput={this.props.handleInput} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  handleInput,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  handleInput,\r\n} from './contacts-actions';\r\n\r\nconst contacts = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) => [\r\n    ...state.filter(contact => contact.id !== payload),\r\n  ],\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [handleInput]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items: contacts,\r\n  filter,\r\n  loading,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n// const ContactsPersistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  // devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// export default { store, persistor };\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nimport App from './components/App';\nimport store from './redux/store';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}